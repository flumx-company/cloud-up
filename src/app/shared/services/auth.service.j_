"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
require("rxjs/add/operator/catch");
require("rxjs/add/operator/map");
var angular_oauth2_oidc_1 = require("angular-oauth2-oidc");
var AuthService = /** @class */ (function () {
    function AuthService(_router, oauthService) {
        this._router = _router;
        this.oauthService = oauthService;
        this.configureAuth();
    }
    AuthService.prototype.configureAuth = function () {
        var _this = this;
        this.oauthService.configure({
            // loginUrl: 'http://localhost:8080/uaa/oauth/authorize',
            loginUrl: window.location.origin + '/backend/oauthserver/uaa/oauth/authorize',
            redirectUri: window.location.origin,
            clientId: 'FrontendClient',
            scope: 'user-manager origin-core-data open-item-core-data',
            silentRefreshRedirectUri: window.location.origin + '/silent-refresh.html',
            oidc: false,
            // TODO delete following entry if frontend is also htttps,,,
            requireHttps: false
        });
        this.oauthService.tryLogin({}).then(function () {
            if (_this.oauthService.hasValidAccessToken()) {
                _this.oauthService.setupAutomaticSilentRefresh();
            }
        });
        this.oauthService.setStorage(sessionStorage);
        this.oauthService.tokenValidationHandler = new angular_oauth2_oidc_1.JwksValidationHandler();
        // this.oauthService.events.subscribe(({type}: OAuthEvent) => {
        //   console.log(type);
        //  });
    };
    AuthService.prototype.obtainAccessToken = function () {
        this.oauthService.initImplicitFlow();
    };
    AuthService.prototype.getAccessToken = function () {
        if (!this.isLoggedIn()) {
            this.oauthService.initImplicitFlow();
        }
        return this.oauthService.getAccessToken();
    };
    AuthService.prototype.isLoggedIn = function () {
        console.log(this.oauthService.getAccessToken());
        if (this.oauthService.getAccessToken() === null) {
            return false;
        }
        return true;
    };
    Object.defineProperty(AuthService.prototype, "userName", {
        get: function () {
            var claims = this.oauthService.getIdentityClaims();
            if (!claims) {
                return null;
            }
            return claims;
            // return claims.name;
        },
        enumerable: true,
        configurable: true
    });
    AuthService.prototype.logout = function () {
        this.oauthService.logOut();
        location.reload();
    };
    AuthService = __decorate([
        core_1.Injectable()
    ], AuthService);
    return AuthService;
}());
exports.AuthService = AuthService;
